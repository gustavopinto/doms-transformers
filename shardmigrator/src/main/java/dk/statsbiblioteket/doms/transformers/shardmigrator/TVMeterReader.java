package dk.statsbiblioteket.doms.transformers.shardmigrator;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

import dk.statsbiblioteket.doms.transformers.shardmigrator.autogenerated.ParsedProgramClassification;
import dk.statsbiblioteket.doms.transformers.shardmigrator.autogenerated.TvmeterProgram;


/**
 * Class to handle transformation of original TVMeter (Gallup) metadata and output a XML representation of it 
 */
public class TVMeterReader {

    /**
     * Private constructor 
     */
    private TVMeterReader() {}
    
    /**
     * Read a TVMeter file and output a TvmeterProgram object
     * @param tvmeterFile The file to be parsed
     * @return TvmeterProgram
     * @throws Exception foo!! 
     */
    public static TvmeterProgram readTVMeterFile(String tvmeterFile) throws FileNotFoundException, IOException, 
            NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, 
            InvocationTargetException {
        TvmeterProgram program = new TvmeterProgram();
        ParsedProgramClassification classification = new ParsedProgramClassification();
        String tvmeterContents = org.apache.commons.io.IOUtils.toString(new FileInputStream(tvmeterFile));

        String part1, part2, part3;
        String[] temp = tvmeterContents.split("parsedProgramClassification");
        part1 = temp[0].split("\\{")[1];
        temp = temp[1].split("\\{")[1].split("\\}");
        part2 = temp[0];
        part3 = temp[1];
        handlePart(program, part1);
        handlePart(classification, part2);
        handlePart(program, part3);
                        
        program.setParsedProgramClassification(classification);        
        return program;
    }
    
    private static void handlePart(Object obj, String part) throws NoSuchMethodException, SecurityException, 
            IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        String[] subparts = part.split(",");
        for(String subpart : Arrays.asList(subparts)) {
            String[] kv = subpart.split("=");
            if(kv.length > 1) {
                setElement(obj, removeWhitespace(kv[0]), cleanupValue(kv[1]));
            }
        }
    }
    
    private static String removeWhitespace(String value) {
        return value.replaceAll("\\s", "");
    }
    
    private static String cleanupValue(String value) {
        String temp = value.replaceAll("\\&apos\\;", "");
        temp = temp.replaceAll("\\s", "");
        return temp;
    }
    
    private static void setElement(Object obj, String elementName, String elementValue) throws NoSuchMethodException, 
            SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { 
        String name = Character.toUpperCase(elementName.charAt(0)) + elementName.substring(1);
        Method m = obj.getClass().getMethod("set" + name, String.class);
        m.invoke(obj, elementValue);
        
    }
}
