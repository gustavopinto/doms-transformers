package dk.statsbiblioteket.doms.transformers.shardmigrator;

import dk.statsbiblioteket.doms.transformers.shardmigrator.tvmeter.autogenerated.ParsedProgramClassification;
import dk.statsbiblioteket.doms.transformers.shardmigrator.tvmeter.autogenerated.TvmeterProgram;

import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * Class to handle transformation of original TVMeter (Gallup) metadata and output a XML representation of it
 */
public class TVMeterReader {

    Map<String, Map<String, String>> tvmeterCodes = new HashMap<String, Map<String, String>>();



    /**
     * Private constructor
     */
    public TVMeterReader() throws IOException {
        parseProgramClassCodes();
        parseChannelNameCodes();
        parseCommonCodes();

    }

    private void parseChannelNameCodes() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream("channelNames.csv")));

        String line;
        while (( line = reader.readLine()) != null) {
            String[] splits = line.split(",");
            Map<String, String> codeMap = tvmeterCodes.get("stationID");
            if (codeMap == null){
                codeMap = new HashMap<String, String>();
                tvmeterCodes.put("stationID",codeMap);
            }

            codeMap.put(splits[1], splits[0]);
        }
    }

    private void parseCommonCodes() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream("commonCodes.csv")));

        String line;
        while (( line = reader.readLine()) != null) {
            String[] splits = line.split(",");
            Map<String, String> codeMap = tvmeterCodes.get("commonCode");
            if (codeMap == null){
                codeMap = new HashMap<String, String>();
                tvmeterCodes.put("commonCode",codeMap);
            }
            String desc = splits[1].replaceAll("\"", "").trim();
            codeMap.put(splits[0],desc);
        }
    }



    private void parseProgramClassCodes() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream("parsedProgramClassificationCodes.csv")));

        Pattern pattern = Pattern.compile("([^,\"]+),([^,\"]+),([^,\"]+|\"[^\"]+\"),([^,\"]+|\"[^\"]+\")");
        String line;
        while (( line = reader.readLine()) != null) {
            Matcher matcher = pattern.matcher(line);
            if (!matcher.matches()){
                System.out.println(line);
            }
            String field = matcher.group(1);

            String key = matcher.group(2);

            String dkDesc = matcher.group(3).replaceAll("\"","").trim();
            String ukDesc = matcher.group(4).replaceAll("\"","").trim();

            Map<String, String> codeMap = tvmeterCodes.get(field);
            if (codeMap == null){
                codeMap = new HashMap<String, String>();
                tvmeterCodes.put(field,codeMap);
            }
            codeMap.put(key,dkDesc);
        }
    }

    /**
     * Read a TVMeter file and output a TvmeterProgram object
     *
     * @param tvmeterFile The file to be parsed
     * @return TvmeterProgram
     * @throws Exception foo!!
     */
    public TvmeterProgram readTVMeterFile(String tvmeterFile) throws FileNotFoundException, IOException,
            NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException,
            InvocationTargetException {
        TvmeterProgram program = new TvmeterProgram();
        ParsedProgramClassification classification = new ParsedProgramClassification();
        String tvmeterContents = org.apache.commons.io.IOUtils.toString(new FileInputStream(tvmeterFile));


        String part1, part2, part3;
        String[] temp = tvmeterContents.split("parsedProgramClassification");
        part1 = temp[0].split("\\{")[1];
        temp = temp[1].split("\\{")[1].split("\\}");
        part2 = temp[0];
        part3 = temp[1];
        handlePart(program, part1);
        handlePart(classification, part2);
        handlePart(program, part3);

        program.setParsedProgramClassification(classification);
        return program;
    }

    private void handlePart(Object obj, String part) throws NoSuchMethodException, SecurityException,
            IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        String[] subparts = part.split(",");
        for (String subpart : Arrays.asList(subparts)) {
            String[] kv = subpart.split("=");
            if (kv.length > 1) {
                String key = removeWhitespace(kv[0]);
                String value = cleanupValue(kv[1]);
                Map<String, String> decoder = tvmeterCodes.get(key);
                if (decoder != null){
                    String decoded = decoder.get(value);
                    if (decoded != null){
                        value = decoded;
                    }
                }
                setElement(obj, key, value);
            }
        }
    }

    private static String removeWhitespace(String value) {
        return value.replaceAll("\\s", "");
    }

    private static String cleanupValue(String value) {
        String temp = value.replaceAll("\\&apos\\;", "");
        temp = temp.trim();
        return temp;
    }

    private static void setElement(Object obj, String elementName, String elementValue) throws NoSuchMethodException,
            SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        String name = Character.toUpperCase(elementName.charAt(0)) + elementName.substring(1);
        Method m = obj.getClass().getMethod("set" + name, String.class);
        m.invoke(obj, elementValue);

    }
}
