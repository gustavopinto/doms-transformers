package dk.statsbiblioteket.doms.transformers.fileenricher;

import dk.statsbiblioteket.doms.central.CentralWebservice;
import dk.statsbiblioteket.doms.central.DatastreamProfile;
import dk.statsbiblioteket.doms.central.InvalidCredentialsException;
import dk.statsbiblioteket.doms.central.InvalidResourceException;
import dk.statsbiblioteket.doms.central.MethodFailedException;
import dk.statsbiblioteket.doms.transformers.common.ChannelIDToSBChannelIDMapper;
import dk.statsbiblioteket.doms.transformers.common.DomsConfig;
import dk.statsbiblioteket.doms.transformers.common.FileNameParser;
import dk.statsbiblioteket.doms.transformers.common.FileRecordingObjectListHandler;
import dk.statsbiblioteket.doms.transformers.common.ObjectHandler;
import dk.statsbiblioteket.doms.transformers.common.autogenerated.BroadcastMetadata;
import dk.statsbiblioteket.doms.transformers.common.autogenerated.ObjectFactory;
import dk.statsbiblioteket.doms.transformers.common.muxchannels.MuxFileChannelCalculator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import java.io.IOException;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Use DOMS to enrich file metadata.
 */
public class DomsFileEnricherObjectHandler implements ObjectHandler {

    private final DomsConfig config;
    private final CentralWebservice webservice;
    private ChannelIDToSBChannelIDMapper channelIDMapper = ChannelIDToSBChannelIDMapper.getInstance();
    private MuxFileChannelCalculator muxChannelCalculator;
    private Marshaller marshaller;
    private ObjectHandler delegate;
    private Map<String, String> checksums;

    public static final String BROADCAST_METADATA_DATASTREAM_NAME = "BROADCAST_METADATA";
    public static final String FFPROBE_DATASTREAM_NAME = "FFPROBE";
    public static final String FFPROBE_ERRORS_DATASTREAM_NAME = "FFPROBE_ERROR_LOG";

    private static final Logger log = LoggerFactory.getLogger(DomsFileEnricherObjectHandler.class);

    /**
     * Initialise object handler.
     *
     * @param config     Configuration.
     * @param webservice The DOMS WebService.
     * @param checksums
     * @throws URISyntaxException 
     * @throws ParseException 
     * @throws IOException 
     */
    public DomsFileEnricherObjectHandler(FileEnricherConfig config, CentralWebservice webservice, Map<String, String> checksums, ObjectHandler delegate) throws JAXBException, IOException, ParseException, URISyntaxException {
        this.config = config;
        this.webservice = webservice;
        this.delegate = delegate;
        this.checksums = checksums;
        this.muxChannelCalculator = new MuxFileChannelCalculator(
                Thread.currentThread().getContextClassLoader().getResourceAsStream("muxChannels.csv"));
        
        marshaller = JAXBContext.newInstance("dk.statsbiblioteket.doms.transformers.common.autogenerated").createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FRAGMENT, Boolean.TRUE);
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

    }

    @Override
    public void transform(String uuid) throws Exception {
        if (!shouldEnrich(uuid)) {
            return;
        }

        String filename = getFilenameFromObject(uuid);

        if (filename != null) {
            webservice.markInProgressObject(Arrays.asList(uuid), "Modifying object as part of datamodel upgrade");
            if (delegate != null) {
                delegate.transform(uuid);
            }
            BroadcastMetadata metadata
                    = FileNameParser.decodeFilename(filename, checksums, muxChannelCalculator);
            if (metadata != null) {
                System.out.println(String.format("metadata (format=%s, recorder=%s) for %s", metadata.getFormat(), metadata.getRecorder(), filename));
                storeMetadataInObject(uuid, metadata);
            }
            webservice.markPublishedObject(Arrays.asList(uuid), "Modifying object as part of datamodel upgrade");
        } else {
            FileRecordingObjectListHandler.recordIgnored(uuid);
        }
    }

    public void storeMetadataInObject(String uuid, BroadcastMetadata metadata) throws InvalidCredentialsException, MethodFailedException, InvalidResourceException, JAXBException {
        StringWriter writer = new StringWriter();
        JAXBElement<BroadcastMetadata> blob = new ObjectFactory().createBroadcastMetadata(metadata);
        marshaller.marshal(blob, writer);
        String contents = writer.toString();
        webservice.modifyDatastream(uuid, "BROADCAST_METADATA", contents, "Updating metadata as part of the radio/tv datamodel refactoring");
    }

    public String getFilenameFromObject(String uuid) throws InvalidCredentialsException, MethodFailedException, InvalidResourceException {
        String label = webservice.getObjectProfile(uuid).getTitle();

        if (label.startsWith("http://")) {
            return label.substring(label.lastIndexOf("/") + 1);
        } else {
            return null;
        }
    }

    public boolean shouldEnrich(String uuid) throws InvalidCredentialsException, MethodFailedException, InvalidResourceException {
        for (DatastreamProfile datastreamProfile : webservice.getObjectProfile(uuid).getDatastreams()) {
            String type = datastreamProfile.getId();

            if (type.equals("FFPROBE") || type.equals("FFPROBE_ERROR_LOG") || type.equals("BROADCAST_METADATA")) {
                return false;
            }
        }

        return true;
    }
}
